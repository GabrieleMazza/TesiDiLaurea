lines(seq(from=0,to=35),theta,type='l')
lunghezza_70<-length(!is.na(divorces_70))
O_70<-divorces_70[!is.na(divorces_70)]
R_70<-array(data=NA,dim=lunghezza_70)
R_70[1]<-(numb_married_70[1]+initial_70)/2
for(i in 2:lunghezza_70)
R_70[i]<-(numb_married_70[i]+numb_married_70[i-1])/2
theta<-O_70/R_70
plot(seq(from=0,to=35),theta,type='l')
lunghezza_70
divorces_70[!is.na(divorces_70)]
length(!is.na(divorces_70))
divorces_70[!is.na(divorces_70)]
length(O_70)
!is.na(divorces_70)
O_70<-divorces_70[!is.na(divorces_70)]
lunghezza_70<-length(O_70)
R_70<-array(data=NA,dim=lunghezza_70)
R_70[1]<-(numb_married_70[1]+initial_70)/2
for(i in 2:lunghezza_70)
R_70[i]<-(numb_married_70[i]+numb_married_70[i-1])/2
theta<-O_70/R_70
plot(seq(from=0,to=35),theta,type='l')
lunghezza_60<
9
lunghezza_60
plot(seq(from=0,to=lunghezza_70-1),theta,type='l')
theta
O_70<-divorces_70[!is.na(divorces_70)]
lunghezza_70<-length(O_70)
R_70<-array(data=NA,dim=lunghezza_70)
R_70[1]<-(numb_married_70[1]+initial_70)/2
for(i in 2:lunghezza_70)
R_70[i]<-(numb_married_70[i]+numb_married_70[i-1])/2
theta<-O_70/R_70
plot(seq(from=0,to=lunghezza_70-1),theta,type='l')
O_70
lunghezza_70<-length(O_70)
lunghezza_70
R_70
R_70[1]<-(numb_married_70[1]+initial_70)/2
R_70[1]
numb_married_70
data
divorces_70
data[,4]
initial_70<-29370
divorces_70<-data[,4]
numb_married_70<-data[,5]
O_70<-divorces_70[!is.na(divorces_70)]
lunghezza_70<-length(O_70)
R_70<-array(data=NA,dim=lunghezza_70)
R_70[1]<-(numb_married_70[1]+initial_70)/2
for(i in 2:lunghezza_70)
R_70[i]<-(numb_married_70[i]+numb_married_70[i-1])/2
theta<-O_70/R_70
plot(seq(from=0,to=lunghezza_70-1),theta,type='l')
initial_80<-22230
divorces_80<-data[,6]
numb_married_80<-data[,7]
O_80<-divorces_80[!is.na(divorces_80)]
lunghezza_80<-length(O_80)
R_80<-array(data=NA,dim=lunghezza_80)
R_80[1]<-(numb_married_80[1]+initial_80)/2
for(i in 2:lunghezza_80)
R_80[i]<-(numb_married_80[i]+numb_married_80[i-1])/2
theta<-O_80/R_80
plot(seq(from=0,to=lunghezza_80-1),theta,type='l')
plot(seq(from=0,to=lunghezza_60-1),theta,type='l',xlim=c(0,30),xaxs='i',yaxs='i',lwd=1.5)
points(seq(from=0,to=lunghezza_70-1),theta,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
data<-matrix(data=c(
0,10,23641,12,29358,4,22226,
1,34,23607,27,29331,31,22195,
2,97,23510,123,29208,164,22031,
3,147,23363,317,28891,356,21675,
4,191,23172,429,28462,467,21208,
5,203,22969,454,28008,455,20753,
6,181,22788,401,27607,460,20293,
7,170,22618,401,27206,426,19867,
8,162,22456,377,26829,415,19452,
9,134,22322,313,26516,390,19062,
10,149,22173,316,26200,423,18639,
11,139,22034,323,25877,359,18280,
12,149,21885,318,25559,400,17880,
13,138,21747,291,25268,369,17511,
14,152,21595,292,24976,342,17169,
15,160,21435,323,24653,294,16875,
16,167,21268,264,24389,NA,NA,
17,151,21117,272,24117,NA,NA,
18,153,20964,281,23835,NA,NA,
19,153,20811,282,23553,NA,NA,
20,155,20656,317,23236,NA,NA,
21,153,20503,284,22952,NA,NA,
22,160,20343,269,22683,NA,NA,
23,150,20193,269,22414,NA,NA,
24,144,20049,292,22122,NA,NA,
25,135,19914,231,21891,NA,NA,
26,109,19805,NA,NA,NA,NA,
27,132,19673,NA,NA,NA,NA,
28,122,19551,NA,NA,NA,NA,
29,88,19463,NA,NA,NA,NA,
30,74,19389,NA,NA,NA,NA,
31,64,19325,NA,NA,NA,NA,
32,66,19259,NA,NA,NA,NA,
33,61,19198,NA,NA,NA,NA,
34,59,19139,NA,NA,NA,NA,
35,38,19101,NA,NA,NA,NA),nrow=36,ncol=7,byrow=TRUE)
# 60
initial_60<-23651
divorces_60<-data[,2]
numb_married_60<-data[,3]
O_60<-divorces_60[!is.na(divorces_60)]
lunghezza_60<-length(O_60)
R_60<-array(data=NA,dim=lunghezza_60)
R_60[1]<-(numb_married_60[1]+initial_60)/2
for(i in 2:lunghezza_60)
R_60[i]<-(numb_married_60[i]+numb_married_60[i-1])/2
theta_60<-O_60/R_60
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l')
# 70
initial_70<-29370
divorces_70<-data[,4]
numb_married_70<-data[,5]
O_70<-divorces_70[!is.na(divorces_70)]
lunghezza_70<-length(O_70)
R_70<-array(data=NA,dim=lunghezza_70)
R_70[1]<-(numb_married_70[1]+initial_70)/2
for(i in 2:lunghezza_70)
R_70[i]<-(numb_married_70[i]+numb_married_70[i-1])/2
theta_70<-O_70/R_70
plot(seq(from=0,to=lunghezza_70-1),theta_70,type='l')
# 80
initial_80<-22230
divorces_80<-data[,6]
numb_married_80<-data[,7]
O_80<-divorces_80[!is.na(divorces_80)]
lunghezza_80<-length(O_80)
R_80<-array(data=NA,dim=lunghezza_80)
R_80[1]<-(numb_married_80[1]+initial_80)/2
for(i in 2:lunghezza_80)
R_80[i]<-(numb_married_80[i]+numb_married_80[i-1])/2
theta_80<-O_80/R_80
plot(seq(from=0,to=lunghezza_80-1),theta_80,type='l')
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l',xlim=c(0,30),xaxs='i',yaxs='i',lwd=1.5)
points(seq(from=0,to=lunghezza_70-1),theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta_80,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l',xlim=c(0,30),ylim=c(0,25),xaxs='i',yaxs='i',lwd=1.5)
points(seq(from=0,to=lunghezza_70-1),theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta_80,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),1000*theta_60,type='l',xlim=c(0,30),ylim=c(0,25),xaxs='i',yaxs='i',lwd=1.5)
points(seq(from=0,to=lunghezza_70-1),1000*theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),1000*theta_80,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l',xlim=c(0,30),ylim=c(0,0.025),xaxs='i',yaxs='i',lwd=1.5,xlab='Duration of marriage',ylim='Divorce rate')
points(seq(from=0,to=lunghezza_70-1),theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta_80,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l',xlim=c(0,30),ylim=c(0,0.025),xaxs='i',yaxs='i',lwd=1.5,xlab='Duration of marriage',ylab='Divorce rate')
points(seq(from=0,to=lunghezza_70-1),theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta_80,type='l',col='red',lwd=1.5)
legend('bottomright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),theta_60,type='l',xlim=c(0,30),ylim=c(0,0.025),xaxs='i',yaxs='i',lwd=1.5,xlab='Duration of marriage',ylab='Divorce rate')
points(seq(from=0,to=lunghezza_70-1),theta_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),theta_80,type='l',col='red',lwd=1.5)
legend('topright',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
mara<-c(5,4,6,32,52,6,1)
cumsum(mara)
S_60<-exp(-cumsum(theta_60))
S_60<-exp(-cumsum(theta_60))
S_70<-exp(-cumsum(theta_70))
S_80<-exp(-cumsum(theta_80))
plot(seq(from=0,to=lunghezza_60-1),S_60,type='l',xlim=c(0,25),ylim=c(0,1),xaxs='i',yaxs='i',lwd=1.5,xlab='Duration of marriage',ylab='Survival of marriage')
points(seq(from=0,to=lunghezza_70-1),S_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),S_80,type='l',col='red',lwd=1.5)
legend('bottomleft',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
plot(seq(from=0,to=lunghezza_60-1),S_60,type='l',xlim=c(0,25),ylim=c(0.5,1),xaxs='i',yaxs='i',lwd=1.5,xlab='Duration of marriage',ylab='Survival of marriage')
points(seq(from=0,to=lunghezza_70-1),S_70,type='l',col='blue',lwd=1.5)
points(seq(from=0,to=lunghezza_80-1),S_80,type='l',col='red',lwd=1.5)
legend('bottomleft',inset=0.05, legend=c('1960', '1970','1980'),col=c('black','blue','red'), lty=c(1,1), cex = 1,lwd=c(1.5,1.5,1.5))
rm(list=ls())
library(survival)
# Analisi di dati di conteggio
# Dati simulati
# Gruppo di controllo (treat=0 50%) e gruppo con trattamento (treat=1 50%)
# Hazard rate costante nel tempo alpha(t)=b
# Popolazione con 3 livelli di frailty
# Trattamento efficace
# Frailty    Proporzione    alpha_controllo    alpha_trattamento
#    1           40%               1                   0.5
#    2           40%               2                   1
#    3           20%              10                   5
N=100
set.seed(2014)
id=1:N
group=sample(1:3,N,replace=TRUE,prob=c(0.4,0.4,0.2))
treat=rbinom(N,1,0.5)
gen_times=function(id,group,treat){
# Selezione hazard rate corrispondente
if(group==1) alpha=1-0.5*treat
if(group==2) alpha=2-treat
if(group==3) alpha=10-5*treat
# Simulazione eventi, con censoramento al tempo 1
time=c()
while(sum(time)<1){
time=c(time,round(rexp(1,rate=alpha),2))
}
sample=matrix(NA,nrow=length(time),ncol=5)
sample[,1]=id
sample[,2]=group
sample[,3]=treat
sample[,4]=c(time[-length(time)],1-sum(time[-length(time)]))
sample[,5]=c(rep(1,length(time)-1),0) # 1=evento, 0=censuramento
return(sample)
}
sample=do.call('rbind',mapply(gen_times,id,group,treat))
colnames(sample)=c("id","group","treat","time","status")
sample=as.data.frame(sample)
head(sample)
# Stimatore di Nelson Aalen
controllo_surv=Surv(time=sample$time[sample$treat==0],event=sample$status[sample$treat==0],type='right')
fit_controllo=survfit(controllo_surv~1)
trattam_surv=Surv(time=sample$time[sample$treat==1],event=sample$status[sample$treat==1],type='right')
fit_trattam=survfit(trattam_surv~1)
x11()
plot(fit_controllo$time[-1],cumsum(fit_controllo$n.event[-1]/fit_controllo$n.risk[-1]),type='l',xlab='Tempo',ylab='A',col='green')
lines(fit_trattam$time[-1],cumsum(fit_trattam$n.event[-1]/fit_trattam$n.risk[-1]),type='l',xlab='Tempo',ylab='A',col='red')
legend(x='bottomright',legend=c('Controllo','Trattamento'),fill=c('green','red'))
# Cox Model, hazard proporzionali
sample_surv=Surv(time=sample$time,event=sample$status,type='right')
fit_cox=coxph(sample_surv~sample$treat)
fit_cox
# Frailty model, hazard proporzionali, Z con distribuzione Gamma
sample_surv=Surv(time=sample$time,event=sample$status,type='right')
fit_frailty <- coxph(sample_surv~sample$treat+frailty(sample$id,distribution='gamma'))
fit_frailty
###############################################################################################
library(parfm)
# Analisi del dataset 'kidney'
data(kidney)
help(kidney)
kidney$sex=kidney$sex-1 # 0=maschio, 1=femmina
head(kidney)
# Cox Model, hazard proporzionali
kidney_surv=Surv(time=kidney$time,event=kidney$status,type='right')
fit_cox=coxph(kidney_surv~age+sex,data=kidney)
fit_cox
# Frailty model, hazard proporzionali, Z con distribuzione Gamma
kidney_surv=Surv(time=kidney$time,event=kidney$status,type='right')
fit_frailty=coxph(kidney_surv~age+sex+frailty(id,distribution='gamma'),data=kidney)
fit_frailty
# Frailty model, baseline hazard Weibull, Z con distribuzione Gamma
kidney_model=parfm(Surv(time,status)~age+sex,cluster='id',data=kidney,
dist="weibull",frailty="gamma")
kidney_model
# Frailty model, scelta baseline e distribuzione Z tramite AIC, BIC
kidney_model_select=select.parfm(Surv(time,status)~age+sex,cluster='id',data=kidney,
dist=c("exponential","weibull","gompertz","loglogistic","lognormal"),
frailty=c("gamma","ingau","possta"))
kidney_model_select
x11()
plot(kidney_model_select)
save(kidney_model_select,"kidney_model_select")
save(kidney_model_select,"kidney_model_select.Rdata")
save(kidney_model_select,file="kidney_model_select.Rdata")
load("kidney_model_select.Rdata")
kidney_model_select
x11()
plot(kidney_model_select)
rm(list=ls())
library(survival)
# Analisi di dati di conteggio
# Dati simulati
# Gruppo di controllo (treat=0 50%) e gruppo con trattamento (treat=1 50%)
# Hazard rate costante nel tempo alpha(t)=b
# Popolazione con 3 livelli di frailty
# Trattamento efficace
# Frailty    Proporzione    alpha_controllo    alpha_trattamento
#    1           40%               1                   0.5
#    2           40%               2                   1
#    3           20%              10                   5
N=100
set.seed(2014)
id=1:N
group=sample(1:3,N,replace=TRUE,prob=c(0.4,0.4,0.2))
treat=rbinom(N,1,0.5)
gen_times=function(id,group,treat){
# Selezione hazard rate corrispondente
if(group==1) alpha=1-0.5*treat
if(group==2) alpha=2-treat
if(group==3) alpha=10-5*treat
# Simulazione eventi, con censoramento al tempo 1
time=c()
while(sum(time)<1){
time=c(time,round(rexp(1,rate=alpha),2))
}
sample=matrix(NA,nrow=length(time),ncol=5)
sample[,1]=id
sample[,2]=group
sample[,3]=treat
sample[,4]=c(time[-length(time)],1-sum(time[-length(time)]))
sample[,5]=c(rep(1,length(time)-1),0) # 1=evento, 0=censuramento
return(sample)
}
sample=do.call('rbind',mapply(gen_times,id,group,treat))
colnames(sample)=c("id","group","treat","time","status")
sample=as.data.frame(sample)
head(sample)
# Stimatore di Nelson Aalen
controllo_surv=Surv(time=sample$time[sample$treat==0],event=sample$status[sample$treat==0],type='right')
fit_controllo=survfit(controllo_surv~1)
trattam_surv=Surv(time=sample$time[sample$treat==1],event=sample$status[sample$treat==1],type='right')
fit_trattam=survfit(trattam_surv~1)
x11()
plot(fit_controllo$time[-1],cumsum(fit_controllo$n.event[-1]/fit_controllo$n.risk[-1]),type='l',xlab='Tempo',ylab='A',col='green')
lines(fit_trattam$time[-1],cumsum(fit_trattam$n.event[-1]/fit_trattam$n.risk[-1]),type='l',xlab='Tempo',ylab='A',col='red')
legend(x='bottomright',legend=c('Controllo','Trattamento'),fill=c('green','red'))
# Cox Model, hazard proporzionali
sample_surv=Surv(time=sample$time,event=sample$status,type='right')
fit_cox=coxph(sample_surv~sample$treat)
fit_cox
# Frailty model, hazard proporzionali, Z con distribuzione Gamma
sample_surv=Surv(time=sample$time,event=sample$status,type='right')
fit_frailty <- coxph(sample_surv~sample$treat+frailty(sample$id,distribution='gamma'))
fit_frailty
###############################################################################################
library(parfm)
# Analisi del dataset 'kidney'
data(kidney)
help(kidney)
kidney$sex=kidney$sex-1 # 0=maschio, 1=femmina
head(kidney)
# Cox Model, hazard proporzionali
kidney_surv=Surv(time=kidney$time,event=kidney$status,type='right')
fit_cox=coxph(kidney_surv~age+sex,data=kidney)
fit_cox
# Frailty model, hazard proporzionali, Z con distribuzione Gamma
kidney_surv=Surv(time=kidney$time,event=kidney$status,type='right')
fit_frailty=coxph(kidney_surv~age+sex+frailty(id,distribution='gamma'),data=kidney)
fit_frailty
# Frailty model, baseline hazard Weibull, Z con distribuzione Gamma
kidney_model=parfm(Surv(time,status)~age+sex,cluster='id',data=kidney,
dist="weibull",frailty="gamma")
kidney_model
# Frailty model, scelta baseline e distribuzione Z tramite AIC, BIC
# kidney_model_select=select.parfm(Surv(time,status)~age+sex,cluster='id',data=kidney,
#                                  dist=c("exponential","weibull","gompertz","loglogistic","lognormal"),
#                                  frailty=c("gamma","ingau","possta"))
load("kidney_model_select.Rdata")
kidney_model_select
x11()
plot(kidney_model_select)
exp(9.196)
sqrt(250000)
500*0.93
20-0.0465*110
14.885+0.0465*300
0.93^2
25-0.0465*465
sqrt((25-0.0465*465)/10)
0.58116*1.812*sqrt(1/12+(110-300)^2/10000)
qt(0.95,10)
0.58116*1.812461*sqrt(1/12+(110-300)^2/10000)
sqrt((25-0.0465*465)/10)*1.812461*sqrt(1/12+(110-300)^2/10000)
qt(0.05,10)
sqrt((25-0.0465*465)/10)*(-1.812461)*sqrt(1/12+(110-300)^2/10000)
sqrt((25-0.0465*465)/10)*1.812461*sqrt((1/12)+((110-300)^2/10000))
qt(0.95,10)
pchi(0.47,3)
pchisq(0.47,3)
1-pchisq(0.47,3)
2.75+3.75+4.75
2.912*0.914
2.495-2.912*0.914
0.08+0.16+0.05+0.027+0.05+0.027
mara<-c(60.2, 59.6, 60.3, 59.5, 60.2, 60.4, 59.5, 60.4, 60.2, 59.7)
mean(mara)
var(mara)
mara-mean(mara)
sum((mara-mean(mara))^2)
sum((mara-mean(mara))^2)/(length(mara)-1)
sum((mara-mean(mara))^2)/(length(mara))
sum((mara-mean(mara))^2)/(length(mara)-1)
var(mara)
1.28/2.7
32/225
sqrt(32/225)
sum(mara^2)
9*36000/19.023
9*36000/2.7
32/225
9.9+14.25
9.9+10.125
9.9+4.5
8.25+14.25
8.25+4.5
sqrt(5)/1.64
(sqrt(5)/1.64)^2
setwd("~/Dropbox/materiale Laura/Codici R")
source("2013_SSR_AllFunctions.R")
library(fda)
library(rgl)
MeuseData=read.table('MeuseData.txt', header=FALSE)
p = MeuseData[,2:3]
np = dim(p)[[1]]
plot(p[,1],p[,2])
MeuseTri = as.matrix(read.table('MeuseTri.txt', header=F))
t = MeuseTri
nt = dim(t)[[1]]
plot(p[,1],p[,2],type="n")
polygon(c(p[MeuseTri[1,1],1],p[MeuseTri[1,2],1],p[MeuseTri[1,3],1]),c(p[MeuseTri[1,1],2],p[MeuseTri[1,2],2],p[MeuseTri[1,3],2]))
for (ne in 1:nt)
{polygon(c(p[MeuseTri[ne,1],1],p[MeuseTri[ne,2],1],p[MeuseTri[ne,3],1]),c(p[MeuseTri[ne,1],2],p[MeuseTri[ne,2],2],p[MeuseTri[ne,3],2]))
}
print(paste("Number of edited triangles = ",nt))
e = NULL
#  set up the FEM basis object and plot it
order=2
#order=1
basisobj = create.FEM.basis(p, e, t, order)
Meusefd = fd(numeric(basisobj$nbasis),basisobj)
#  set up the data array using zinc concentration
data = matrix(0,nrow=np,ncol=2)
data[,1] = 1:np
######## CAMBIATO SOLO PER OGGI (4 Febbr 2011):
########data[,2] = log(MeuseData[,7])
data[,2] = MeuseData[,7]
#  use as covariate the distance from river; for the moment we use as regressors
#  sqrt(distance) and
#  elev
desmat = matrix(1,nrow=np,ncol=2)
desmat[,1] = sqrt(MeuseData[,9])
desmat[,2] = (MeuseData[,8])
lambdaCovar = 10^(3.5)
ZincMeusefdCovar = smooth.FEM.fd.Covar(data,desmat,Meusefd,lambdaCovar)
fhat=ZincMeusefdCovar$felsplobj$coef
betahat= ( solve( t(desmat) %*% desmat ) ) %*% t(desmat) %*% (data[,2]-fhat[1:np,])
#  plot smoothing surface computed using covariates
plot.FEM(ZincMeusefdCovar$felsplobj)
lambda = 1
ZincMeusefd = smooth.FEM.fd(data,Meusefd,lambda)
plot.FEM(ZincMeusefd$felsplobj)
#  evaluate the solution on the points
MeuseDataFitCovar = eval.FEM.fd(p[,1], p[,2], ZincMeusefdCovar$felsplobj) +  desmat %*% betahat
#  evaluate the solution on the points NO Covar
MeuseDataFit = eval.FEM.fd(p[,1], p[,2], ZincMeusefd$felsplobj)
MeuseResCovar = cbind(data[,1], data[,2] - MeuseDataFitCovar)
min(MeuseResCovar[,2])
max(MeuseResCovar[,2])
#  compute the residuals NO Covar
MeuseRes = cbind(data[,1], data[,2] - MeuseDataFit)
min(MeuseRes[,2])
max(MeuseRes[,2])
ZincResMeusefdCovar = smooth.FEM.fd(MeuseResCovar,Meusefd,lambda)
windows()
plot.FEM(ZincResMeusefdCovar$felsplobj)
#title('\fontsize{16} Residuals for log10 of zinc concentration')
ZincResMeusefd = smooth.FEM.fd(MeuseRes,Meusefd,lambda)
windows()
plot.FEM(ZincResMeusefd$felsplobj)
#title('\fontsize{16} Residuals for log10 of zinc concentration')
dvec.FES = numeric(np*(np-1)/2)
rvec.FES = dvec.FES
m = 0
for (i in 2:np)
{
for (j in 1:(i-1))
{  m = m + 1
dvec.FES[m] = sum((p[i,]-p[j,])^2)
rvec.FES[m] = MeuseResCovar[i,2] * MeuseResCovar[j,2]
}
}
windows()
plot(log10(dvec.FES), rvec.FES,xlab="log_{10} Squared distance")
abline(h=0,col=2,lwd=2,lty="dashed")
dvec = numeric(np*(np-1)/2)
rvec = dvec
m = 0
for (i in 2:np)
{
for (j in 1:(i-1))
{  m = m + 1
dvec[m] = sum((p[i,]-p[j,])^2)
rvec[m] = MeuseRes[i,2] * MeuseRes[j,2]
}
}
windows()
plot(log10(dvec), rvec,xlab="log_{10} Squared distance")
abline(h=0,col=2,lwd=2,lty="dashed")
loglam = seq(1,5,by=0.5)
nloglam = length(loglam)
SEsaveCovar = numeric(nloglam)
for (ilam in 1:nloglam)
{
print(c(ilam,loglam[ilam]))
lami = 10^loglam[ilam]
ressave = numeric(np)
for (idrop in 1:np)
{
datai = data[-idrop,]
desmati = desmat[-idrop,]
Meusefdobji   = smooth.FEM.fd.Covar(datai,desmati,Meusefd,lami)
fhati = Meusefdobji$felsplobj$coef
betahati= ( solve( t(desmati) %*% desmati ) ) %*% t(desmati) %*% (datai[,2]-fhati[1:(np-1),])
MeuseDataFiti = eval.FEM.fd(p[idrop,1], p[idrop,2], Meusefdobji$felsplobj) + desmat[idrop,] %*% betahati
ressave[idrop] = data[idrop,2] - MeuseDataFiti
}
SEsaveCovar[ilam] = sqrt(mean(ressave^2))
}
